
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "heimdall"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "heimdall-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('heimdall')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("dfr_adwin")
> ### * dfr_adwin
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dfr_adwin
> ### Title: ADWIN method
> ### Aliases: dfr_adwin
> 
> ### ** Examples
> 
> #Use the same example of dfr_cumsum changing the constructor to:
> #model <- dfr_adwin(target_feat='serie')
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dfr_adwin", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dfr_cumsum")
> ### * dfr_cumsum
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dfr_cumsum
> ### Title: Cumulative Sum for Concept Drift Detection (CUMSUM) method
> ### Aliases: dfr_cumsum
> 
> ### ** Examples
> 
> library(daltoolbox)

Attaching package: ‘daltoolbox’

The following object is masked from ‘package:base’:

    transform

> library(heimdall)
> 
> # This example assumes a model residual where 1 is an error and 0 is a correct prediction.
> 
> data(st_drift_examples)
> data <- st_drift_examples$univariate
> data$event <- NULL
> data$prediction <- st_drift_examples$univariate$serie > 4
> 
> 
> model <- dfr_cumsum()
> 
> detection <- c()
> output <- list(obj=model, pred=FALSE)
> for (i in 1:length(data$serie)){
+  output <- update_state(output$obj, data$serie[i])
+  if (output$pred){
+    type <- 'drift'
+    output$obj <- reset_state(output$obj)
+  }else{
+    type <- ''
+  }
+  detection <- rbind(detection, list(idx=i, event=output$pred, type=type))
+ }
> 
> detection <- as.data.frame(detection)
> detection[detection$type == 'drift',]
    idx event  type
210 210  TRUE drift
221 221  TRUE drift
231 231  TRUE drift
242 242  TRUE drift
252 252  TRUE drift
263 263  TRUE drift
273 273  TRUE drift
284 284  TRUE drift
295 295  TRUE drift
306 306  TRUE drift
318 318  TRUE drift
331 331  TRUE drift
348 348  TRUE drift
375 375  TRUE drift
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dfr_cumsum", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:daltoolbox’

> nameEx("dfr_ddm")
> ### * dfr_ddm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dfr_ddm
> ### Title: Adapted Drift Detection Method (DDM) method
> ### Aliases: dfr_ddm
> 
> ### ** Examples
> 
> library(daltoolbox)

Attaching package: ‘daltoolbox’

The following object is masked from ‘package:base’:

    transform

> library(heimdall)
> 
> # This example assumes a model residual where 1 is an error and 0 is a correct prediction.
> 
> data(st_drift_examples)
> data <- st_drift_examples$univariate
> data$event <- NULL
> data$prediction <- st_drift_examples$univariate$serie > 4
> 
> 
> model <- dfr_ddm()
> 
> detection <- c()
> output <- list(obj=model, pred=FALSE)
> for (i in 1:length(data$serie)){
+  output <- update_state(output$obj, data$serie[i])
+  if (output$pred){
+    type <- 'drift'
+    output$obj <- reset_state(output$obj)
+  }else{
+    type <- ''
+  }
+  detection <- rbind(detection, list(idx=i, event=output$pred, type=type))
+ }
> 
> detection <- as.data.frame(detection)
> detection[detection$type == 'drift',]
    idx event  type
87   87  TRUE drift
145 145  TRUE drift
203 203  TRUE drift
483 483  TRUE drift
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dfr_ddm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:daltoolbox’

> nameEx("dfr_ecdd")
> ### * dfr_ecdd
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dfr_ecdd
> ### Title: Adapted EWMA for Concept Drift Detection (ECDD) method
> ### Aliases: dfr_ecdd
> 
> ### ** Examples
> 
> library(daltoolbox)

Attaching package: ‘daltoolbox’

The following object is masked from ‘package:base’:

    transform

> library(heimdall)
> 
> # This example assumes a model residual where 1 is an error and 0 is a correct prediction.
> 
> data(st_drift_examples)
> data <- st_drift_examples$univariate
> data$event <- NULL
> data$prediction <- st_drift_examples$univariate$serie > 4
> 
> 
> model <- dfr_ecdd()
> 
> detection <- c()
> output <- list(obj=model, pred=FALSE)
> for (i in 1:length(data$serie)){
+  output <- update_state(output$obj, data$serie[i])
+  if (output$pred){
+    type <- 'drift'
+    output$obj <- reset_state(output$obj)
+  }else{
+    type <- ''
+  }
+  detection <- rbind(detection, list(idx=i, event=output$pred, type=type))
+ }
> 
> detection <- as.data.frame(detection)
> detection[detection$type == 'drift',]
    idx event  type
31   31  TRUE drift
63   63  TRUE drift
102 102  TRUE drift
143 143  TRUE drift
183 183  TRUE drift
214 214  TRUE drift
245 245  TRUE drift
276 276  TRUE drift
307 307  TRUE drift
338 338  TRUE drift
369 369  TRUE drift
400 400  TRUE drift
431 431  TRUE drift
464 464  TRUE drift
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dfr_ecdd", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:daltoolbox’

> nameEx("dfr_eddm")
> ### * dfr_eddm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dfr_eddm
> ### Title: Adapted Early Drift Detection Method (EDDM) method
> ### Aliases: dfr_eddm
> 
> ### ** Examples
> 
> library(daltoolbox)

Attaching package: ‘daltoolbox’

The following object is masked from ‘package:base’:

    transform

> library(heimdall)
> 
> # This example assumes a model residual where 1 is an error and 0 is a correct prediction.
> 
> data(st_drift_examples)
> data <- st_drift_examples$univariate
> data$event <- NULL
> data$prediction <- st_drift_examples$univariate$serie > 4
> 
> 
> model <- dfr_eddm()
> 
> detection <- c()
> output <- list(obj=model, pred=FALSE)
> for (i in 1:length(data$serie)){
+  output <- update_state(output$obj, data$serie[i])
+  if (output$pred){
+    type <- 'drift'
+    output$obj <- reset_state(output$obj)
+  }else{
+    type <- ''
+  }
+  detection <- rbind(detection, list(idx=i, event=output$pred, type=type))
+ }
> 
> detection <- as.data.frame(detection)
> detection[detection$type == 'drift',]
[1] idx   event type 
<0 rows> (or 0-length row.names)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dfr_eddm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:daltoolbox’

> nameEx("dfr_hddm")
> ### * dfr_hddm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dfr_hddm
> ### Title: Adapted Hoeffding Drift Detection Method (HDDM) method
> ### Aliases: dfr_hddm
> 
> ### ** Examples
> 
> library(daltoolbox)

Attaching package: ‘daltoolbox’

The following object is masked from ‘package:base’:

    transform

> library(heimdall)
> 
> # This example assumes a model residual where 1 is an error and 0 is a correct prediction.
> 
> data(st_drift_examples)
> data <- st_drift_examples$univariate
> data$event <- NULL
> data$prediction <- st_drift_examples$univariate$serie > 4
> 
> 
> model <- dfr_hddm()
> 
> detection <- c()
> output <- list(obj=model, pred=FALSE)
> for (i in 1:length(data$serie)){
+  output <- update_state(output$obj, data$serie[i])
+  if (output$pred){
+    type <- 'drift'
+    output$obj <- reset_state(output$obj)
+  }else{
+    type <- ''
+  }
+  detection <- rbind(detection, list(idx=i, event=output$pred, type=type))
+ }
> 
> detection <- as.data.frame(detection)
> detection[detection$type == 'drift',]
    idx event  type
3     3  TRUE drift
18   18  TRUE drift
21   21  TRUE drift
39   39  TRUE drift
42   42  TRUE drift
58   58  TRUE drift
61   61  TRUE drift
78   78  TRUE drift
81   81  TRUE drift
97   97  TRUE drift
100 100  TRUE drift
102 102  TRUE drift
105 105  TRUE drift
118 118  TRUE drift
120 120  TRUE drift
122 122  TRUE drift
138 138  TRUE drift
140 140  TRUE drift
142 142  TRUE drift
157 157  TRUE drift
160 160  TRUE drift
162 162  TRUE drift
177 177  TRUE drift
179 179  TRUE drift
181 181  TRUE drift
197 197  TRUE drift
199 199  TRUE drift
201 201  TRUE drift
205 205  TRUE drift
226 226  TRUE drift
245 245  TRUE drift
264 264  TRUE drift
287 287  TRUE drift
300 300  TRUE drift
404 404  TRUE drift
419 419  TRUE drift
424 424  TRUE drift
439 439  TRUE drift
444 444  TRUE drift
459 459  TRUE drift
465 465  TRUE drift
478 478  TRUE drift
483 483  TRUE drift
498 498  TRUE drift
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dfr_hddm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:daltoolbox’

> nameEx("dfr_kldist")
> ### * dfr_kldist
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dfr_kldist
> ### Title: KL Distance method
> ### Aliases: dfr_kldist
> 
> ### ** Examples
> 
> library(daltoolbox)

Attaching package: ‘daltoolbox’

The following object is masked from ‘package:base’:

    transform

> library(heimdall)
> 
> # This example assumes a model residual where 1 is an error and 0 is a correct prediction.
> 
> data(st_drift_examples)
> data <- st_drift_examples$univariate
> data$event <- NULL
> data$prediction <- st_drift_examples$univariate$serie > 4
> 
> 
> model <- dfr_kldist(target_feat='serie')
> 
> detection <- c()
> output <- list(obj=model, pred=FALSE)
> for (i in 1:length(data$serie)){
+  output <- update_state(output$obj, data$serie[i])
+  if (output$pred){
+    type <- 'drift'
+    output$obj <- reset_state(output$obj)
+  }else{
+    type <- ''
+  }
+  detection <- rbind(detection, list(idx=i, event=output$pred, type=type))
+ }
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
Warning in update_state.dfr_kldist(output$obj, data$serie[i]) :
  NaNs produced
> 
> detection <- as.data.frame(detection)
> detection[detection$type == 'drift',]
    idx event  type
116 116  TRUE drift
426 426  TRUE drift
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dfr_kldist", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:daltoolbox’

> nameEx("dfr_kswin")
> ### * dfr_kswin
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dfr_kswin
> ### Title: KSWIN method
> ### Aliases: dfr_kswin
> 
> ### ** Examples
> 
> library(daltoolbox)

Attaching package: ‘daltoolbox’

The following object is masked from ‘package:base’:

    transform

> library(heimdall)
> 
> # This example assumes a model residual where 1 is an error and 0 is a correct prediction.
> 
> data(st_drift_examples)
> data <- st_drift_examples$univariate
> data$event <- NULL
> data$prediction <- st_drift_examples$univariate$serie > 4
> 
> 
> model <- dfr_kswin(target_feat='serie')
> 
> detection <- c()
> output <- list(obj=model, pred=FALSE)
> for (i in 1:length(data$serie)){
+  output <- update_state(output$obj, data$serie[i])
+  if (output$pred){
+    type <- 'drift'
+    output$obj <- reset_state(output$obj)
+  }else{
+    type <- ''
+  }
+  detection <- rbind(detection, list(idx=i, event=output$pred, type=type))
+ }
> 
> detection <- as.data.frame(detection)
> detection[detection$type == 'drift',]
    idx event  type
128 128  TRUE drift
228 228  TRUE drift
328 328  TRUE drift
428 428  TRUE drift
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dfr_kswin", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:daltoolbox’

> nameEx("dfr_mcdd")
> ### * dfr_mcdd
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dfr_mcdd
> ### Title: Mean Comparison Distance method
> ### Aliases: dfr_mcdd
> 
> ### ** Examples
> 
> library(daltoolbox)

Attaching package: ‘daltoolbox’

The following object is masked from ‘package:base’:

    transform

> library(heimdall)
> 
> # This example assumes a model residual where 1 is an error and 0 is a correct prediction.
> 
> data(st_drift_examples)
> data <- st_drift_examples$univariate
> data$event <- NULL
> data$prediction <- st_drift_examples$univariate$serie > 4
> 
> 
> model <- dfr_mcdd(target_feat='depart_visibility')
> 
> detection <- c()
> output <- list(obj=model, pred=FALSE)
> for (i in 1:length(data$serie)){
+  output <- update_state(output$obj, data$serie[i])
+  if (output$pred){
+    type <- 'drift'
+    output$obj <- reset_state(output$obj)
+  }else{
+    type <- ''
+  }
+  detection <- rbind(detection, list(idx=i, event=output$pred, type=type))
+ }
> 
> detection <- as.data.frame(detection)
> detection[detection$type == 'drift',]
    idx event  type
109 109  TRUE drift
209 209  TRUE drift
316 316  TRUE drift
416 416  TRUE drift
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dfr_mcdd", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:daltoolbox’

> nameEx("dfr_page_hinkley")
> ### * dfr_page_hinkley
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dfr_page_hinkley
> ### Title: Adapted Page Hinkley method
> ### Aliases: dfr_page_hinkley
> 
> ### ** Examples
> 
> library(daltoolbox)

Attaching package: ‘daltoolbox’

The following object is masked from ‘package:base’:

    transform

> library(heimdall)
> 
> # This example assumes a model residual where 1 is an error and 0 is a correct prediction.
> 
> data(st_drift_examples)
> data <- st_drift_examples$univariate
> data$event <- NULL
> data$prediction <- st_drift_examples$univariate$serie > 4
> 
> 
> model <- dfr_page_hinkley(target_feat='serie')
> 
> detection <- c()
> output <- list(obj=model, pred=FALSE)
> for (i in 1:length(data$serie)){
+  output <- update_state(output$obj, data$serie[i])
+  if (output$pred){
+    type <- 'drift'
+    output$obj <- reset_state(output$obj)
+  }else{
+    type <- ''
+  }
+  detection <- rbind(detection, list(idx=i, event=output$pred, type=type))
+ }
> 
> detection <- as.data.frame(detection)
> detection[detection$type == 'drift',]
    idx event  type
205 205  TRUE drift
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dfr_page_hinkley", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:daltoolbox’

> nameEx("drifter")
> ### * drifter
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: drifter
> ### Title: Drifter
> ### Aliases: drifter
> 
> ### ** Examples
> 
> # See ?dd_ddm for an example of DDM drift detector
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("drifter", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("error_based")
> ### * error_based
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: error_based
> ### Title: Error Based Drifter sub-class
> ### Aliases: error_based
> 
> ### ** Examples
> 
> # See ?hcd_ddm for an example of DDM drift detector
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("error_based", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("inactive")
> ### * inactive
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: inactive
> ### Title: Inactive dummy detector
> ### Aliases: inactive
> 
> ### ** Examples
> 
> # See ?hcd_ddm for an example of DDM drift detector
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("inactive", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("metric")
> ### * metric
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: metric
> ### Title: Metric
> ### Aliases: metric
> 
> ### ** Examples
> 
> # See ?metric for an example of DDM drift detector
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("metric", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mt_fscore")
> ### * mt_fscore
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mt_fscore
> ### Title: FScore Calculator
> ### Aliases: mt_fscore
> 
> ### ** Examples
> 
> # See ?mt_precision for an example of FScore Calculator
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mt_fscore", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mt_precision")
> ### * mt_precision
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mt_precision
> ### Title: Precision Calculator
> ### Aliases: mt_precision
> 
> ### ** Examples
> 
> # See ?mt_precision for an example of Precision Calculator
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mt_precision", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mt_recall")
> ### * mt_recall
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mt_recall
> ### Title: Recall Calculator
> ### Aliases: mt_recall
> 
> ### ** Examples
> 
> # See ?mt_recall for an example of Recall Calculator
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mt_recall", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("passive")
> ### * passive
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: passive
> ### Title: Passive dummy detector
> ### Aliases: passive
> 
> ### ** Examples
> 
> # See ?hcd_ddm for an example of DDM drift detector
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("passive", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("reset_state")
> ### * reset_state
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: reset_state
> ### Title: Reset State
> ### Aliases: reset_state
> 
> ### ** Examples
> 
> # See ?hcd_ddm for an example of DDM drift detector
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("reset_state", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("st_drift_examples")
> ### * st_drift_examples
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: st_drift_examples
> ### Title: Synthetic time series for concept drift detection
> ### Aliases: st_drift_examples
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(st_drift_examples)
> dataset <- st_drift_examples$example1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("st_drift_examples", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("stealthy")
> ### * stealthy
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: stealthy
> ### Title: Stealthy
> ### Aliases: stealthy
> 
> ### ** Examples
> 
> # See ?dd_ddm for an example of DDM drift detector
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("stealthy", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("update_state")
> ### * update_state
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: update_state
> ### Title: Update State
> ### Aliases: update_state
> 
> ### ** Examples
> 
> # See ?hcd_ddm for an example of DDM drift detector
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("update_state", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.851 0.056 3.913 0.003 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
